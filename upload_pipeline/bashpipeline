```bash
#!/bin/bash

# Function to check for the existence of a file or directory
check_path() {
    local path="$1"
    if [ ! -e "$path" ]; then
        # File or directory does not exist, print a message and return non-zero exit code
        echo "Error: The path does not exist: $path"
        exit 1
    fi
    return 0
}

# Initialize variables
database_config=""
list_accession_file=""
genomic_data_directory=""

# Loop through command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -db)
            database_config="$2"
            shift 2
            ;;
        -l)
            list_accession_file="$2"
            shift 2
            ;;
        -d)
            genomic_data_directory="$2"
            shift 2
            ;;
        *)
            echo "Error: Invalid option $1"
            exit 1
            ;;
    esac
done

# Print values of variables database_config, list_accession_file, and genomic_data_directory
echo "Database Config: $database_config"
echo "List Accession File: $list_accession_file"
echo "Genomic Data Directory: $genomic_data_directory"


# Check if help option is provided
if [[ "$1" == "help" || "$#" -eq 0 ]]; then
    echo "Usage: ./bashpipeline -db <database_config_path> -l <list_accession_file> -d <genomic_data_directory"
fi

# Check if required options are provided
if [ -z "$database_config" ] || [ -z "$list_accession_file" ] || [ -z "$genomic_data_directory" ]; then
    echo "Error: Missing required options. Use 'help' for usage information." >&2
    exit 1
fi

# Check if provided paths are valid
check_path "$database_config"
check_path "$genomic_data_directory"
check_path "$list_accession_file"

# Read accession numbers from the "list_accession" file
while IFS= read -r accession; do

    # Writing a logic to check for the existence of a certain file in any location
    check_file() {
        local file="$1"
        if [ ! -s "$file" ] || [ ! -f "$file" ]; then
            # Genome file is empty or not existent, print a message and return non-zero exit code
            echo "The file is empty or not found: $file"
            continue
        fi
    }

    # Find the genomic fasta file/check if it exists
    genome_file=$(find "$genomic_data_directory/$accession/data/$accession" -name 'GC*.fna' -type f -print -quit)
    check_file "$genome_file";

    # Get the header from the genome file
    header=$(head -n 1 "$genome_file")

    # Extract organism name from the header
    organism_name=$(echo "$header" | awk -F' ' '/>/{print $2, $3}' | head -n 1)

    # Print the organism name
    echo "Organism Name for $accession: $organism_name"


    # Check if gff file is present
    gff_file="$genomic_data_directory/$accession/data/$accession/genomic.gff"
    check_file "$gff_file";

    # Check for corresponding eggnog file
    eggnog_file="$genomic_data_directory/$accession.emapper.annotations"
    check_file "$eggnog_file";

    # Generate the modified eggnog emapper annotation file using inhouse script called 'id_replace.py'
    python id_replace.py "$gff_file" "$eggnog_file"

    # Making the organism.ini configuration file
    cat <<EOF > organism.ini
[OrganismDetails]
Organism: $organism_name
version: 1
source_url:

[SequenceType]
SequenceType: chromosome
scaffold_prefix:

[filePath]
GenBank:
FASTA: $genome_file
GFF: $gff_file
eggnog: eggnog_emapper.modified_annotations

EOF

    # UPLOAD USING galEupy
    # It is assumed that a database.ini file is already present in the working directory
    galEupy -db "$database_config" -org organism.ini -v d -upload All -log "$accession.log"

done < "$list_accession_file"
```
